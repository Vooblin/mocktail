openapi: 3.0.0
info:
  title: Sample Pet Store API
  description: A simple API for managing pets
  version: 1.0.0
servers:
  - url: https://api.petstore.example
    description: Production server

paths:
  /pets:
    get:
      summary: List all pets
      description: Returns a list of all pets in the store
      operationId: listPets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
        - name: species
          in: query
          description: Filter by species
          required: false
          schema:
            type: string
            enum: [dog, cat, bird, fish]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid request

    post:
      summary: Create a new pet
      description: Add a new pet to the store
      operationId: createPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input

  /pets/{petId}:
    get:
      summary: Get a pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    put:
      summary: Update a pet
      description: Update an existing pet's information
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          description: ID of the pet to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: ID of the pet to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - species
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        species:
          type: string
          enum: [dog, cat, bird, fish]
        age:
          type: integer
          format: int32
          minimum: 0
        color:
          type: string
        createdAt:
          type: string
          format: date-time

    NewPet:
      type: object
      required:
        - name
        - species
      properties:
        name:
          type: string
        species:
          type: string
          enum: [dog, cat, bird, fish]
        age:
          type: integer
          format: int32
          minimum: 0
        color:
          type: string
